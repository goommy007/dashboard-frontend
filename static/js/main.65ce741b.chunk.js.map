{"version":3,"sources":["NavBar/NavBar.js","NewUpdate/NewUpdate.js","Administrator/Admin.js","Questions/Alert.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","to","NewQuestion","props","state","disabled","title","description","selectedOption","value","this","setState","e","target","status","axios","post","window","location","reload","history","push","delete","htmlFor","type","onBlur","updateTitle","placeholder","updateDescription","onChange","onClick","submit","clear","Component","withRouter","LoginPage","username","password","error","redirect","handlePassChange","bind","handleUserChange","handleSubmit","dismissError","evt","preventDefault","then","response","condition","data","r","alert","path","Home","onSubmit","data-test","login","AlertPage","questions","get","map","question","key","id","Alert","variant","Heading","timestamp","App","align","component","Admin","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65ce741b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-primary fixed-top\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n                Greyhound App Support\r\n      </Link>\r\n\r\n            <NavLink to className=\"navbar-brand\" to=\"/Admin\">\r\n                <button className=\"btn btn-dark\">\r\n                    Admin Login\r\n        </button>\r\n            </NavLink>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Button, Modal, Row, Col, Form, DropdownButton, Dropdown } from 'react-bootstrap';\r\n\r\n\r\nclass NewQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            disabled: false,\r\n            title: '',\r\n            description: '',\r\n            selectedOption: ''\r\n        };\r\n    }\r\n\r\n    updateDescription(value) {\r\n        this.setState({\r\n            description: value,\r\n        });\r\n    }\r\n\r\n    updateTitle(value) {\r\n        this.setState({\r\n            title: value,\r\n        });\r\n    }\r\n\r\n    updateStatus(e) {\r\n        const status = e.target.value;\r\n        this.setState({\r\n            status: e.target.value\r\n        })\r\n    }\r\n\r\n    async submit() {\r\n        this.setState({\r\n            disabled: true,\r\n        });\r\n\r\n        await axios.post('http://localhost:8081', {\r\n            title: this.state.title,\r\n            description: this.state.description,\r\n            status: this.state.selectedOption\r\n        });\r\n\r\n        window.location.reload();\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    async clear() {\r\n        this.setState({\r\n            disabled: true,\r\n        });\r\n\r\n        await axios.delete('http://localhost:8081/');\r\n\r\n        this.props.history.push('/');\r\n        window.location.reload();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"card border-primary\">\r\n                            <div className=\"card-header\">Add an Update</div>\r\n                            <div className=\"card-body text-left\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"exampleInputEmail1\">Title:</label>\r\n                                    <input\r\n                                        disabled={this.state.disabled}\r\n                                        type=\"text\"\r\n                                        onBlur={(e) => { this.updateTitle(e.target.value) }}\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Enter an update such as INC number and short description\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"exampleInputEmail1\">Description:</label>\r\n                                    <input\r\n                                        disabled={this.state.disabled}\r\n                                        type=\"text\"\r\n                                        onBlur={(e) => { this.updateDescription(e.target.value) }}\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Give more context to your Incident.\"\r\n                                    />\r\n\r\n                                </div>\r\n                                <select onChange={(e) => this.setState({ selectedOption: e.target.value })}>\r\n                                    <option value=\"danger\">Select the Level of the Issue</option>\r\n                                    <option value=\"danger\">Danger</option>\r\n                                    <option value=\"success\">Success</option>\r\n                                    <option value=\"warning\">Warning</option>\r\n                                </select>\r\n                                <br /> <br />\r\n                                <tr>\r\n                                    <td><button\r\n                                        disabled={this.state.disabled}\r\n                                        className=\"btn btn-primary\"\r\n                                        onClick={() => { this.submit() }}>\r\n                                        Submit\r\n                </button></td>    &nbsp;\r\n                <td><button\r\n                                        disabled={this.state.disabled}\r\n                                        className=\"btn btn-primary\"\r\n                                        onClick={() => { this.clear() }}>\r\n                                        Delete All\r\n                </button></td>\r\n                                </tr>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(NewQuestion);","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Home from '../NewUpdate/NewUpdate';\r\n\r\n\r\nclass LoginPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            error: '',\r\n            redirect: false\r\n        };\r\n\r\n        this.handlePassChange = this.handlePassChange.bind(this);\r\n        this.handleUserChange = this.handleUserChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.dismissError = this.dismissError.bind(this);\r\n    }\r\n\r\n    dismissError() {\r\n        this.setState({ error: '' });\r\n    }\r\n\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n\r\n        if (!this.state.username) {\r\n            return this.setState({ error: 'Username is required' });\r\n        }\r\n\r\n        if (!this.state.password) {\r\n            return this.setState({ error: 'Password is required' });\r\n        }\r\n\r\n        return this.setState({ error: '' });\r\n    }\r\n\r\n    handleUserChange(evt) {\r\n        this.setState({\r\n            username: evt.target.value,\r\n        });\r\n    };\r\n\r\n    handlePassChange(evt) {\r\n        this.setState({\r\n            password: evt.target.value,\r\n        });\r\n    }\r\n\r\n    async login() {\r\n        this.setState({\r\n            disabled: true,\r\n        });\r\n\r\n\r\n\r\n        await axios.post('http://localhost:8081/login', {\r\n            username: this.state.username,\r\n            password: this.state.password,\r\n        }).then(response => this.condition(response.data));\r\n\r\n    }\r\n    condition(r) {\r\n        if (r === \"correct\") {\r\n            this.setState({ redirect: true });\r\n            this.props.history.push('/Home');\r\n\r\n        } else {\r\n            alert('Login Failed');\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n    render() {\r\n        // NOTE: I use data-attributes for easier E2E testing\r\n        // but you don't need to target those (any css-selector will work)\r\n\r\n        if (this.state.redirect) {\r\n\r\n            return (<Redirect to path='/Home' Component={Home} />);\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\" >\r\n                <div className=\"row\" >\r\n                    <div className=\"col-50\">\r\n                        <div className=\"card border-primary\">\r\n                            <div className=\"card-header\">Login Here</div>\r\n                            <div className=\"card-body text-left\">\r\n                                <div className=\"form-group\">\r\n                                    <form onSubmit={this.handleSubmit}>\r\n                                        {\r\n                                            this.state.error &&\r\n                                            <h3 data-test=\"error\" onClick={this.dismissError}>\r\n                                                <button onClick={this.dismissError}>✖</button>\r\n                                                {this.state.error}\r\n                                            </h3>\r\n                                        }\r\n\r\n\r\n                                        <label htmlFor=\"exampleInputEmail1\">UserName:</label>\r\n                                        <input type=\"text\" className=\"form-control\" data-test=\"username\" value={this.state.username} onChange={this.handleUserChange} />\r\n\r\n                                        <label htmlFor=\"exampleInputEmail1\">Password:</label>\r\n                                        <input type=\"password\" className=\"form-control\" data-test=\"password\" value={this.state.password} onChange={this.handlePassChange} />\r\n\r\n                                        <br></br>\r\n                                        <button className=\"button\" onClick={() => { this.login() }}>\r\n                                            Log-in\r\n      </button>\r\n\r\n                                    </form>\r\n\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import React, { Component } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport axios from 'axios';\r\n\r\nclass AlertPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            questions: null,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const questions = (await axios.get('http://localhost:8081/')).data;\r\n        this.setState({\r\n            questions,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    {this.state.questions === null && <h4>No Issues on-going currently</h4>}\r\n                    {\r\n                        this.state.questions && this.state.questions.map(question => (\r\n                            <div className=\"App\" key={question.id}  >\r\n                                <Alert variant={question.status}>\r\n                                    <Alert.Heading>Update : {question.id}</Alert.Heading>\r\n                                    <p3>Last Updated :  {question.timestamp}</p3>\r\n                                    <p>{question.title}</p>\r\n                                    <hr />\r\n                                    <p className=\"mb-0\">{question.description}</p>\r\n                                </Alert>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AlertPage;","import React, { Component } from 'react';\nimport NavBar from './NavBar/NavBar';\nimport Admin from './Administrator/Admin';\nimport Home from './NewUpdate/NewUpdate';\nimport { Route, Switch } from 'react-router-dom';\nimport Alert from './Questions/Alert';\n\nclass App extends Component {\n\n\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <h2 align=\"center\">GREYHOUND STATUS MONITOR</h2>\n        <div align=\"center\"><Alert /> </div>\n        <div align=\"center\" ><Switch><Route path=\"/Admin\" component={Admin} /></Switch> </div>\n        <div align=\"center\" ><Switch><Route path=\"/Home\" component={Home} /></Switch> </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}