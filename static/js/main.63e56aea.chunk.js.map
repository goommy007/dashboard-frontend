{"version":3,"sources":["NavBar/NavBar.js","Alerts/Alert.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","AlertPage","props","state","questions","axios","get","data","this","setState","className","map","question","key","id","Alert","variant","status","Heading","timestamp","title","description","Component","App","align","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAqBeA,I,kDCwBAC,E,YAxCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,UAAW,MAJA,E,iNASUC,IAAMC,IAAI,0B,OAA7BF,E,OAAwDG,KAC9DC,KAAKC,SAAS,CACVL,c,qIAKJ,OACI,yBAAKM,UAAU,aACX,yBAAKA,UAAU,OACe,OAAzBF,KAAKL,MAAMC,WAAsB,4DAE9BI,KAAKL,MAAMC,WAAaI,KAAKL,MAAMC,UAAUO,KAAI,SAAAC,GAAQ,OACrD,yBAAKF,UAAU,MAAMG,IAAKD,EAASE,IAC/B,kBAACC,EAAA,EAAD,CAAOC,QAASJ,EAASK,QACrB,kBAACF,EAAA,EAAMG,QAAP,iBAAyBN,EAASE,IAClC,+CAAqBF,EAASO,WAC9B,2BAAIP,EAASQ,OACb,6BACA,uBAAGV,UAAU,QAAQE,EAASS,wB,GA7B1CC,aCeTC,E,iLATX,OACE,6BACE,wBAAIC,MAAM,UAAV,4BACA,yBAAKA,MAAM,UAAS,kBAAC,EAAD,MAApB,U,GARUF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.63e56aea.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-primary fixed-top\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n                Greyhound App Support\r\n      </Link>\r\n\r\n            <NavLink to className=\"navbar-brand\" to=\"/Admin\">\r\n                <button className=\"btn btn-dark\">\r\n                    Admin Login\r\n        </button>\r\n            </NavLink>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport axios from 'axios';\r\n\r\nclass AlertPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            questions: null,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const questions = (await axios.get('http://localhost:8081/')).data;\r\n        this.setState({\r\n            questions,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    {this.state.questions === null && <h4>No Issues on-going currently</h4>}\r\n                    {\r\n                        this.state.questions && this.state.questions.map(question => (\r\n                            <div className=\"App\" key={question.id}  >\r\n                                <Alert variant={question.status}>\r\n                                    <Alert.Heading>Update : {question.id}</Alert.Heading>\r\n                                    <p3>Last Updated :  {question.timestamp}</p3>\r\n                                    <p>{question.title}</p>\r\n                                    <hr />\r\n                                    <p className=\"mb-0\">{question.description}</p>\r\n                                </Alert>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AlertPage;","import React, { Component } from 'react';\nimport NavBar from './NavBar/NavBar';\nimport Alert from './Alerts/Alert';\n\n\nclass App extends Component {\n\n\n\n  render() {\n    return (\n      <div>\n        <h2 align=\"center\">GREYHOUND STATUS MONITOR</h2>\n        <div align=\"center\"><Alert /> </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}